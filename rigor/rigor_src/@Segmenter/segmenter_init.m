function segmenter_init(seg_obj)
%SEGMENTER_INIT initialize Segmenter by initializing data-structures, 
% adding directories to path, preloading data (for boundary detectors), and 
% starting processes (like parallel threads) which would be needed later.
% Most of the initialization depends on what parameters are being used
%
% @authors:     Ahmad Humayun
% @contact:     ahumayun@cc.gatech.edu
% @affiliation: Georgia Institute of Technology
% @date:        Fall 2013 - Summer 2014

    % init timers (see timing_analysis.m for details)
    seg_obj.timings = struct('total_seg_time', NaN, ...
                             'total_init_time', NaN, ...
                             'extra_bndry_compute_time', NaN, ...
                             'superpixels_compute_time', NaN, ...
                             'precompute_pairwise_time', NaN, ...
                             'precompute_seed_time', NaN, ...
                             'im_pairwise_time', NaN, ...
                             'total_computing_segs_time', [], ...
                             'pairwise_set_time', [], ...
                             'unary_cost_set_time', [], ...
                             'pmc_time', [], ...
                             'pmc_parallel_cut_time',  [], ...
                             'pmc_parallel_overhead_time', [], ...
                             'seg_filtering_time', [], ...
                             'init_filter_time', [], ...
                             'energy_filter_time', [], ...
                             'rand_filter_time', [], ...
                             'seg_similar_filter_time', []);
    
    % init segment numbers
    seg_obj.num_segs = struct('init_segs', [], ...
                              'after_splitting_conncomp', [], ...
                              'after_energy_filtering', [], ...
                              'after_random_picking', [], ...
                              'after_repeat_remove', [], ...
                              'after_clustering_FINAL', []);
    
    fprintf('Computing object segments for %s\n', ...
            seg_obj.input_info.img_name);
    
    % include all paths needed to run the segmenter with current settings
    seg_obj.include_params = ...
        include_codes(seg_obj.segm_params, seg_obj.filepath_params);
    
    % preload any data which would be required later on
    seg_obj.preload_data = struct;

    % load any data required by the boundary detectors
    if strcmpi(seg_obj.segm_params.boundaries_method, 'SketchTokens')
        model = load(fullfile(seg_obj.include_params.sketchtokens_dir, ...
                              'models/forest/modelFull.mat'));
        seg_obj.preload_data.sketchtokens_model = model.model;
    end
    if strcmpi(seg_obj.segm_params.boundaries_method, 'StructEdges')
        model = load(fullfile(seg_obj.include_params.structedges_dir, ...
                              'models/forest/modelBsds.mat'));
        model.model.opts.multiscale = 1;
        model.model.opts.nms = 1;
        seg_obj.preload_data.structedges_model = model.model;
    end
    
    % create threads in case running hochbaum
    if strcmpi(seg_obj.segm_params.pmc_maxflow_method, 'hochbaum') && usejava('jvm')
        % create multiple threads (set how many you have)
        N_THREADS = 4;
        if matlabpool('size') ~= N_THREADS
            matlabpool('open', N_THREADS);
        end
    end

    % start timers
    seg_obj.timings.total_seg_time = tic;
    seg_obj.timings.total_init_time = tic;
end
